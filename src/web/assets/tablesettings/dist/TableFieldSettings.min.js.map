{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./TableFieldSettings.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","onAddRow","proxy","onDeleteRow","EditableTable","onAddColumn","$tr","reconstructDefaultsTable","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","length","colId","rowObj","data","options","theadHtml","heading","$table","id","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","createRowObj","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","row","addRow","label","prop","$closeButton","class","text","Modal","onHide","hide","setTimeout","first","trigger","handleOptionsRowChange","updateSizeAndPosition","handleSettingsModalHide","$rows","$row","eq","push","default","handleFormSubmit","JSON","stringify","currentTarget","jQuery"],"mappings":"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","file":"TableFieldSettings.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.TableFieldSettings = Garnish.Base.extend({\n        columnsTableName: null,\n        defaultsTableName: null,\n        columnsData: null,\n        columnsTableId: null,\n        defaultsTableId: null,\n        columnsTableInputPath: null,\n        defaultsTableInputPath: null,\n\n        defaults: null,\n        columnSettings: null,\n\n        dropdownSettingsHtml: null,\n        dropdownSettingsCols: null,\n\n        columnsTable: null,\n        defaultsTable: null,\n\n        init: function(columnsTableName, defaultsTableName, columnsData, defaults, columnSettings, dropdownSettingsHtml, dropdownSettingsCols) {\n            this.columnsTableName = columnsTableName;\n            this.defaultsTableName = defaultsTableName;\n            this.columnsData = columnsData;\n\n            this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n            this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n            this.columnsTableInputPath = Craft.filterArray(this.columnsTableName.split(/[\\[\\]]+/));\n            this.defaultsTableInputPath = Craft.filterArray(this.defaultsTableName.split(/[\\[\\]]+/));\n\n            this.defaults = defaults;\n            this.columnSettings = columnSettings;\n\n            this.dropdownSettingsHtml = dropdownSettingsHtml;\n            this.dropdownSettingsCols = dropdownSettingsCols;\n\n            this.initColumnsTable();\n            this.initDefaultsTable();\n        },\n\n        initColumnsTable: function() {\n            this.columnsTable = new ColumnTable(this, this.columnsTableId, this.columnsTableName, this.columnSettings, {\n                rowIdPrefix: 'col',\n                defaultValues: {\n                    type: 'singleline'\n                },\n                onAddRow: $.proxy(this, 'onAddColumn'),\n                onDeleteRow: $.proxy(this, 'reconstructDefaultsTable')\n            });\n        },\n\n        initDefaultsTable: function() {\n            this.defaultsTable = new Craft.EditableTable(this.defaultsTableId, this.defaultsTableName, this.columnsData, {\n                rowIdPrefix: 'row'\n            });\n        },\n\n        onAddColumn: function($tr) {\n            this.reconstructDefaultsTable();\n            this.initColumnSettingInputs($tr);\n        },\n\n        initColumnSettingInputs: function($container) {\n            var $textareas = $container.find('td:first-child textarea, td:nth-child(3) textarea');\n            this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n        },\n\n        reconstructDefaultsTable: function() {\n            this.columnsData = Craft.expandPostArray(Garnish.getPostData(this.columnsTable.$tbody));\n            var defaults = Craft.expandPostArray(Garnish.getPostData(this.defaultsTable.$tbody));\n\n            var i, key;\n\n            for (i = 0; i < this.columnsTableInputPath.length; i++) {\n                key = this.columnsTableInputPath[i];\n                this.columnsData = this.columnsData[key];\n            }\n\n            // Add in the dropdown options\n            for (let colId in this.columnsData) {\n                if (this.columnsData.hasOwnProperty(colId) && this.columnsData[colId].type === 'select') {\n                    var rowObj = this.columnsTable.$tbody.find('tr[data-id=\"' + colId + '\"]').data('editable-table-row');\n                    this.columnsData[colId].options = rowObj.options || [];\n                }\n            }\n\n            for (i = 0; i < this.defaultsTableInputPath.length; i++) {\n                key = this.defaultsTableInputPath[i];\n\n                if (typeof defaults[key] === 'undefined') {\n                    defaults = {};\n                    break;\n                } else {\n                    defaults = defaults[key];\n                }\n            }\n\n            var theadHtml = '<thead>' +\n                '<tr>';\n\n            for (let colId in this.columnsData) {\n                if (!this.columnsData.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                theadHtml += '<th scope=\"col\">' + (this.columnsData[colId].heading ? this.columnsData[colId].heading : '&nbsp;') + '</th>';\n            }\n\n            theadHtml += '<th colspan=\"2\"></th>' +\n                '</tr>' +\n                '</thead>';\n\n            var $table = $('<table/>', {\n                id: this.defaultsTableId,\n                'class': 'editable fullwidth'\n            }).append(theadHtml);\n\n            var $tbody = $('<tbody/>').appendTo($table);\n\n            for (var rowId in defaults) {\n                if (!defaults.hasOwnProperty(rowId)) {\n                    continue;\n                }\n\n                Craft.EditableTable.createRow(rowId, this.columnsData, this.defaultsTableName, defaults[rowId]).appendTo($tbody);\n            }\n\n            this.defaultsTable.$table.replaceWith($table);\n            this.defaultsTable.destroy();\n            delete this.defaultsTable;\n            this.initDefaultsTable();\n        }\n    });\n\n    var ColumnTable = Craft.EditableTable.extend({\n        fieldSettings: null,\n\n        init: function(fieldSettings, id, baseName, columns, settings) {\n            this.fieldSettings = fieldSettings;\n            this.base(id, baseName, columns, settings);\n        },\n\n        initialize: function() {\n            if (!this.base()) {\n                return false;\n            }\n\n            this.fieldSettings.initColumnSettingInputs(this.$tbody);\n            this.sorter.settings.onSortChange = $.proxy(this.fieldSettings.reconstructDefaultsTable, this.fieldSettings);\n            return true;\n        },\n\n        createRowObj: function($tr) {\n            return new ColumnTable.Row(this, $tr);\n        }\n    });\n\n    ColumnTable.Row = Craft.EditableTable.Row.extend({\n        $typeSelect: null,\n        $settingsBtn: null,\n\n        options: null,\n        settingsModal: null,\n        optionsTable: null,\n\n        init: function(table, tr) {\n            this.base(table, tr);\n\n            if (this.table.fieldSettings.columnsData[this.id]) {\n                this.options = this.table.fieldSettings.columnsData[this.id].options || null;\n            }\n\n            var $typeCell = this.$tr.find('td:nth-child(4)');\n            var $typeSelectContainer = $typeCell.find('.select');\n            this.$settingsBtn = $typeCell.find('.settings');\n\n            if (!this.$settingsBtn.length) {\n                this.$settingsBtn = $('<a/>', {\n                    'class': 'settings light invisible',\n                    role: 'button',\n                    'data-icon': 'settings'\n                });\n                $('<div/>', {'class': 'flex flex-nowrap'})\n                    .appendTo($typeCell)\n                    .append($typeSelectContainer)\n                    .append(this.$settingsBtn);\n            }\n\n            this.$typeSelect = $typeSelectContainer.find('select');\n            this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n            this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n            this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n        },\n\n        handleTypeChange: function() {\n            if (this.$typeSelect.val() === 'select') {\n                this.$settingsBtn.removeClass('invisible');\n            } else {\n                this.$settingsBtn.addClass('invisible');\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        showSettingsModal: function(ev) {\n            if (!this.settingsModal) {\n                var id = 'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n                var $modal = $('<div/>', {'class': 'modal dropdownsettingsmodal'}).appendTo(Garnish.$bod);\n                var $body = $('<div/>', {'class': 'body'})\n                    .appendTo($modal)\n                    .html(this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id));\n\n                this.optionsTable = new Craft.EditableTable(id, '__NAME__', this.table.fieldSettings.dropdownSettingsCols, {\n                    onAddRow: $.proxy(this, 'handleOptionsRowChange'),\n                    onDeleteRow: $.proxy(this, 'handleOptionsRowChange')\n                });\n\n                if (this.options && this.options.length) {\n                    var row;\n                    for (var i = 0; i < this.options.length; i++) {\n                        row = this.optionsTable.addRow(false);\n                        row.$tr.find('.option-label textarea').val(this.options[i].label);\n                        row.$tr.find('.option-value textarea').val(this.options[i].value);\n                        row.$tr.find('.option-default input[type=\"checkbox\"]').prop('checked', !!this.options[i].default);\n                    }\n                } else {\n                    this.optionsTable.addRow(false);\n                }\n\n                var $closeButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Done')\n                }).appendTo($body);\n\n                this.settingsModal = new Garnish.Modal($modal, {\n                    onHide: $.proxy(this, 'handleSettingsModalHide')\n                });\n\n                this.addListener($closeButton, 'click', function() {\n                    this.settingsModal.hide();\n                });\n            } else {\n                this.settingsModal.show();\n            }\n\n            setTimeout($.proxy(function() {\n                this.optionsTable.$tbody.find('textarea').first().trigger('focus')\n            }, this), 100);\n        },\n\n        handleOptionsRowChange: function() {\n            if (this.settingsModal) {\n                this.settingsModal.updateSizeAndPosition();\n            }\n        },\n\n        handleSettingsModalHide: function() {\n            this.options = [];\n            var $rows = this.optionsTable.$table.find('tbody tr');\n            for (var i = 0; i < $rows.length; i++) {\n                let $row = $rows.eq(i);\n                this.options.push({\n                    label: $row.find('.option-label textarea').val(),\n                    value: $row.find('.option-value textarea').val(),\n                    default: $row.find('.option-default input[type=checkbox]').prop('checked')\n                })\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        handleFormSubmit: function(ev) {\n            if (this.$typeSelect.val() === 'select') {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: this.table.fieldSettings.columnsTableName + '[' + this.id + '][options]',\n                    value: JSON.stringify(this.options)\n                }).appendTo(ev.currentTarget);\n            }\n        }\n    });\n})(jQuery);\n"],"sourceRoot":""}