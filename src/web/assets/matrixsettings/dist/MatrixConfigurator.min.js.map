{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./MatrixConfigurator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$container","$blockTypesColumnContainer","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","selectedBlockType","blockTypeSort","totalNewBlockTypes","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","init","this","formatInputId","children","$fieldItemsOuterContainer","setContainerHeight","$blockTypeItems","length","$item","id","data","BlockType","newMatch","match","parseInt","DragSort","handle","axis","addListener","setTimeout","proxy","maxColHeight","Math","max","height","getFieldTypeInfo","type","addBlockType","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","appendTo","applySettings","select","addField","addItems","addFieldToSelectedBlockType","BlockTypeSettingsModal","getFieldTypeSettingsHtml","Promise","resolve","reject","cancel","requestAnimationFrame","axios","CancelToken","source","sendActionRequest","cancelToken","token","namespace","then","response","cp","displayError","Modal","base","$form","$bod","setContainer","$body","$nameInputContainer","ui","createTextField","label","instructions","find","$nameInput","$nameErrorList","hide","$handleInputContainer","class","$handleInput","$handleErrorList","$deleteBtn","$buttons","$cancelBtn","text","$submitBtn","handleGenerator","HandleGenerator","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","trim","val","shake","onDeleteClick","confirm","onDelete","errors","stopListening","startListening","addClass","removeClass","displayErrors","isMobileBrowser","trigger","attr","$input","$errorList","remove","configurator","$nameLabel","$handleLabel","$nameHiddenInput","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","fields","selectedField","fieldSort","totalNewFields","fieldSettings","$nameContainer","insertBefore","$fieldItems","$fieldItem","Field","onSortChange","$items","deselect","showSettings","selfDestruct","blockType","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","fieldTypeSettingsTemplates","isNew","getDefaultFieldSettings","setFieldType","SlidePicker","min","step","valueLabel","width","pct","onChange","insertAfter","updateNameLabel","html","escapeHtml","updateHandleLabel","updateRequiredIcon","prop","onTypeSelectChange","updateTranslationMethodSettings","detach","getFieldTypeSettings","fresh","$settings","headHtml","footHtml","append","initUiElements","appendHeadHtml","appendFootHtml","settingsHtml","getParsedFieldTypeHtml","noop","replace","RegExp","maxlength","required","createTextareaField","$fieldset","createCheckboxField","checked","fieldTypeOptions","push","createSelectField","options","isMultiSite","toggle","targetPrefix","$translationKeyFormatContainer","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.setContainerHeight();\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n            this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n        },\n\n        setContainerHeight: function() {\n            setTimeout($.proxy(function() {\n                var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                this.$container.height(maxColHeight);\n            }, this), 1);\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            }, this);\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Save'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                }, this)\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n            blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                // In case Firefox was sleeping on the job\n                this.$typeSettingsContainer.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"],"sourceRoot":""}